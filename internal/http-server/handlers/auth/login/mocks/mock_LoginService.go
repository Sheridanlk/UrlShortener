// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLoginService creates a new instance of MockLoginService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginService {
	mock := &MockLoginService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginService is an autogenerated mock type for the LoginService type
type MockLoginService struct {
	mock.Mock
}

type MockLoginService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginService) EXPECT() *MockLoginService_Expecter {
	return &MockLoginService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockLoginService
func (_mock *MockLoginService) Login(ctx context.Context, email string, password string, appID int32) (string, error) {
	ret := _mock.Called(ctx, email, password, appID)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int32) (string, error)); ok {
		return returnFunc(ctx, email, password, appID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int32) string); ok {
		r0 = returnFunc(ctx, email, password, appID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int32) error); ok {
		r1 = returnFunc(ctx, email, password, appID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockLoginService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
//   - appID int32
func (_e *MockLoginService_Expecter) Login(ctx interface{}, email interface{}, password interface{}, appID interface{}) *MockLoginService_Login_Call {
	return &MockLoginService_Login_Call{Call: _e.mock.On("Login", ctx, email, password, appID)}
}

func (_c *MockLoginService_Login_Call) Run(run func(ctx context.Context, email string, password string, appID int32)) *MockLoginService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int32
		if args[3] != nil {
			arg3 = args[3].(int32)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockLoginService_Login_Call) Return(s string, err error) *MockLoginService_Login_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockLoginService_Login_Call) RunAndReturn(run func(ctx context.Context, email string, password string, appID int32) (string, error)) *MockLoginService_Login_Call {
	_c.Call.Return(run)
	return _c
}
