// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRegisterService creates a new instance of MockRegisterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterService {
	mock := &MockRegisterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegisterService is an autogenerated mock type for the RegisterService type
type MockRegisterService struct {
	mock.Mock
}

type MockRegisterService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterService) EXPECT() *MockRegisterService_Expecter {
	return &MockRegisterService_Expecter{mock: &_m.Mock}
}

// Regiser provides a mock function for the type MockRegisterService
func (_mock *MockRegisterService) Regiser(ctx context.Context, email string, password string) (int64, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Regiser")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegisterService_Regiser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Regiser'
type MockRegisterService_Regiser_Call struct {
	*mock.Call
}

// Regiser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockRegisterService_Expecter) Regiser(ctx interface{}, email interface{}, password interface{}) *MockRegisterService_Regiser_Call {
	return &MockRegisterService_Regiser_Call{Call: _e.mock.On("Regiser", ctx, email, password)}
}

func (_c *MockRegisterService_Regiser_Call) Run(run func(ctx context.Context, email string, password string)) *MockRegisterService_Regiser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRegisterService_Regiser_Call) Return(n int64, err error) *MockRegisterService_Regiser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRegisterService_Regiser_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (int64, error)) *MockRegisterService_Regiser_Call {
	_c.Call.Return(run)
	return _c
}
